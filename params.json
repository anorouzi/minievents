{"name":"Minievents","tagline":"Minievents is a Framework build over Mininet to introduce an event generator. Events are changes in a mininet network at specific times.","body":"Minievents: A mininet Framework to define events in mininet networks\r\n========================================================\r\n\r\nMinievents 2.2.0\r\n\r\n## What is Mininet?\r\n\r\nMininet emulates a complete network of hosts, links, and switches\r\non a single machine.  To create a sample two-host, one-switch network,\r\njust run:\r\n\r\n  `sudo mn`\r\n\r\nMininet is useful for interactive development, testing, and demos,\r\nespecially those using OpenFlow and SDN.  OpenFlow-based network\r\ncontrollers prototyped in Mininet can usually be transferred to\r\nhardware with minimal changes for full line-rate execution.\r\n\r\n## What is Minievents?\r\n\r\nMinievents is a Framework build over Mininet to introduce an event generator.\r\nEvents are changes in a mininet network at specific times. \r\n\r\nEvents in Minievents are defined in an external json document.\r\nUp to now the implemented events are TCP and UDP traffic (iperf) and link \r\nproperties modification (delay, bandwidth).\r\n\r\n## How to use Minievents?\r\nMinievents is a child class of Mininet class. It adds events_file argument\r\nto specify the json event document. There is no Minievent CLI up to now.\r\n\r\n### Simple Example\r\n\r\nThe __main__ of the minievents.py provides a simple example of Minievents framework.\r\nIt is a single switch topology with two host.\r\nJust run from the project root directory:\r\n\r\n  `sudo python mininet/minievents.py`\r\n\r\nThis command will use *mininet/minievents.json* as event source file.\r\nThe events define a UDP and TCP streams starting at second 2, and the link between h1 and s1\r\nis modified at second 5 (50 Mbps bandwidth), at second 10 (100 Mbps bandwidth and 100 ms delay), \r\nsecond 15 (100 % loss) and second 20 (0% loss and 500 Mbps bandwidth). The network is stopped at\r\nsecond 30.\r\n \r\n#### Check results\r\nNext Graphs are generated with data extracted from iperf output:\r\n![iperf TCP bandwidth](https://raw.githubusercontent.com/cgiraldo/minievents/master/output/tcp-bw.png)\r\n\r\n## Json event file format and events\r\nThe minievents.json is an example of the json definition of events for minievents \r\nFramework. The file should be an array of Json objets (the events) with the following members:\r\n\r\n* time: time in seconds since launch when the event should happen.\r\n* type: event type. Up to now, the following event types are present\r\n  * iperf: data traffic generator\r\n  * editLink: edit Link properties.\r\n  * stop: stop the network\r\n* params: parameters for the event.\r\n\r\nThe events are:\r\n\r\nThe *editLink* event modifies the properties of a link and takes the next parameters:\r\n* src: name of the source node of the link\r\n* dst: name of the destination node of the link.\r\n* loss: percentage of packet loss in the link\r\n* bw: link bandwidth in Mbits/sec\r\n* delay: in milliseconds\r\n* (...) It should work with any of the config parameters of the Mininet TCIntf class.\r\n\r\nThe *iperf* event  creates a traffic stream between two hosts (TCP or UDP) and takes the next parameters:\r\n* src: name of the source node\r\n* dst: name of the destination node\r\n* protocol: L4 protocol, should be TCP (default) or UDP.\r\n* duration: duration of the traffic stream in seconds.\r\n* bw (for UDP only): transmission in bits/sec.\r\nThe *iperf* client and server process outputs to the files:\r\n`output/iperf-{TCP-UDP}-{client|server}-{src}-{dst}.txt`\r\n\r\n## Authoring\r\n\r\n* Carlos Giraldo\r\nAtlantTIC Research Center, University of Vigo, Spain\r\nhttp://atlanttic.uvigo.es/en/\r\n\r\n","google":"UA-58575460-1","note":"Don't delete this file! It's used internally to help with page regeneration."}